{"version":3,"file":"useUnmountedRef.B0XYk9S5.js","sources":["../../../source/life-cycle/useUnmountedRef.tsx","../../../node_modules/.pnpm/ahooks@3.9.0_react-dom@19.1.1_react@19.1.1/node_modules/ahooks/es/useUnmountedRef/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useUnmountedRef } from 'ahooks'\n\nconst MyComponent = () => {\n  const unmountedRef = useUnmountedRef()\n  useEffect(() => {\n    setTimeout(() => {\n      if (!unmountedRef.current) {\n        console.log('component is alive')\n      } else {\n        console.log('component is unmounted')\n      }\n    }, 3000)\n  }, [])\n\n  return <p>Hello World!</p>\n}\n\nexport default () => {\n  const [state, setState] = useState(true)\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => setState(!state)}>\n        {state ? 'unmount' : 'mount'}\n      </button>\n      {state && <MyComponent />}\n    </>\n  )\n}\n","import { useEffect, useRef } from 'react';\nvar useUnmountedRef = function () {\n  var unmountedRef = useRef(false);\n  useEffect(function () {\n    unmountedRef.current = false;\n    return function () {\n      unmountedRef.current = true;\n    };\n  }, []);\n  return unmountedRef;\n};\nexport default useUnmountedRef;"],"names":["MyComponent","unmountedRef","useRef","useEffect","current","useUnmountedRef","setTimeout","jsx","children","state","setState","useState","jsxs","Fragment","type","onClick"],"mappings":"iHAGA,MAAMA,EAAc,KAClB,MAAMC,ECHc,WACpB,IAAIA,EAAeC,EAAAA,QAAO,GAO1B,OANAC,EAAAA,UAAU,WAER,OADAF,EAAaG,SAAU,EAChB,WACLH,EAAaG,SAAU,CACzB,CACF,EAAG,IACIH,CACT,CDNuBI,GAWrB,OAVAF,EAAAA,UAAU,KACRG,WAAW,KACJL,EAAaG,SAKjB,MACF,MAEIG,IAAC,KAAEC,SAAA,kBAGZH,EAAe,KACb,MAAOI,EAAOC,GAAYC,EAAAA,UAAS,GAEnC,OACEC,EAAAA,KAAAC,WAAA,CACEL,SAAA,GAAAD,IAAC,SAAA,CAAOO,KAAK,SAASC,QAAS,IAAML,GAAUD,GAC5CD,SAAAC,EAAQ,UAAY,UAEtBA,SAAUT,EAAA,CAAA","x_google_ignoreList":[1]}
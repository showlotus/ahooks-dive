{"version":3,"file":"app.D7W5u2CY.js","sources":["../../node_modules/.pnpm/vitepress@1.6.3_@algolia+client-search@5.35.0_@types+node@24.1.0_@types+react@19.1.9_markdown_h7mioo7s3v2perar7e3d2uzxeu/node_modules/vitepress/dist/client/app/index.js"],"sourcesContent":["import RawTheme from '@theme/index';\nimport { createApp as createClientApp, createSSRApp, defineComponent, h, onMounted, watchEffect } from 'vue';\nimport { ClientOnly } from './components/ClientOnly';\nimport { Content } from './components/Content';\nimport { useCodeGroups } from './composables/codeGroups';\nimport { useCopyCode } from './composables/copyCode';\nimport { useUpdateHead } from './composables/head';\nimport { usePrefetch } from './composables/preFetch';\nimport { dataSymbol, initData, siteDataRef, useData } from './data';\nimport { RouterSymbol, createRouter, scrollTo } from './router';\nimport { inBrowser, pathToFile } from './utils';\nfunction resolveThemeExtends(theme) {\n    if (theme.extends) {\n        const base = resolveThemeExtends(theme.extends);\n        return {\n            ...base,\n            ...theme,\n            async enhanceApp(ctx) {\n                if (base.enhanceApp)\n                    await base.enhanceApp(ctx);\n                if (theme.enhanceApp)\n                    await theme.enhanceApp(ctx);\n            }\n        };\n    }\n    return theme;\n}\nconst Theme = resolveThemeExtends(RawTheme);\nconst VitePressApp = defineComponent({\n    name: 'VitePressApp',\n    setup() {\n        const { site, lang, dir } = useData();\n        // change the language on the HTML element based on the current lang\n        onMounted(() => {\n            watchEffect(() => {\n                document.documentElement.lang = lang.value;\n                document.documentElement.dir = dir.value;\n            });\n        });\n        if (import.meta.env.PROD && site.value.router.prefetchLinks) {\n            // in prod mode, enable intersectionObserver based pre-fetch\n            usePrefetch();\n        }\n        // setup global copy code handler\n        useCopyCode();\n        // setup global code groups handler\n        useCodeGroups();\n        if (Theme.setup)\n            Theme.setup();\n        return () => h(Theme.Layout);\n    }\n});\nexport async function createApp() {\n    ;\n    globalThis.__VITEPRESS__ = true;\n    const router = newRouter();\n    const app = newApp();\n    app.provide(RouterSymbol, router);\n    const data = initData(router.route);\n    app.provide(dataSymbol, data);\n    // install global components\n    app.component('Content', Content);\n    app.component('ClientOnly', ClientOnly);\n    // expose $frontmatter & $params\n    Object.defineProperties(app.config.globalProperties, {\n        $frontmatter: {\n            get() {\n                return data.frontmatter.value;\n            }\n        },\n        $params: {\n            get() {\n                return data.page.value.params;\n            }\n        }\n    });\n    if (Theme.enhanceApp) {\n        await Theme.enhanceApp({\n            app,\n            router,\n            siteData: siteDataRef\n        });\n    }\n    // setup devtools in dev mode\n    if (import.meta.env.DEV || __VUE_PROD_DEVTOOLS__) {\n        import('./devtools.js').then(({ setupDevtools }) => setupDevtools(app, router, data));\n    }\n    return { app, router, data };\n}\nfunction newApp() {\n    return import.meta.env.PROD\n        ? createSSRApp(VitePressApp)\n        : createClientApp(VitePressApp);\n}\nfunction newRouter() {\n    let isInitialPageLoad = inBrowser;\n    return createRouter((path) => {\n        let pageFilePath = pathToFile(path);\n        let pageModule = null;\n        if (pageFilePath) {\n            // use lean build if this is the initial page load\n            if (isInitialPageLoad) {\n                pageFilePath = pageFilePath.replace(/\\.js$/, '.lean.js');\n            }\n            if (import.meta.env.DEV) {\n                pageModule = import(/*@vite-ignore*/ pageFilePath).catch(() => {\n                    // try with/without trailing slash\n                    // in prod this is handled in src/client/app/utils.ts#pathToFile\n                    const url = new URL(pageFilePath, 'http://a.com');\n                    const path = (url.pathname.endsWith('/index.md')\n                        ? url.pathname.slice(0, -9) + '.md'\n                        : url.pathname.slice(0, -3) + '/index.md') +\n                        url.search +\n                        url.hash;\n                    return import(/*@vite-ignore*/ path);\n                });\n            }\n            else {\n                pageModule = import(/*@vite-ignore*/ pageFilePath);\n            }\n        }\n        if (inBrowser) {\n            isInitialPageLoad = false;\n        }\n        return pageModule;\n    }, Theme.NotFound);\n}\nif (inBrowser) {\n    createApp().then(({ app, router, data }) => {\n        // wait until page component is fetched before mounting\n        router.go().then(() => {\n            // dynamically update head tags\n            useUpdateHead(router.route, data.site);\n            app.mount('#app');\n            // scroll to hash on new tab during dev\n            if (import.meta.env.DEV && location.hash) {\n                const target = document.getElementById(decodeURIComponent(location.hash).slice(1));\n                if (target) {\n                    scrollTo(target, location.hash);\n                }\n            }\n        });\n    });\n}\n"],"names":["Theme","resolveThemeExtends","theme","extends","base","enhanceApp","ctx","RawTheme","VitePressApp","defineComponent","name","setup","site","lang","dir","useData","onMounted","watchEffect","document","documentElement","value","router","prefetchLinks","usePrefetch","useCopyCode","useCodeGroups","h","Layout","async","createApp","globalThis","__VITEPRESS__","isInitialPageLoad","inBrowser","createRouter","path","pageFilePath","pathToFile","pageModule","replace","import","NotFound","newRouter","app","createSSRApp","provide","RouterSymbol","data","initData","route","dataSymbol","component","Content","ClientOnly","Object","defineProperties","config","globalProperties","$frontmatter","get","frontmatter","$params","page","params","siteData","siteDataRef","then","go","useUpdateHead","mount"],"mappings":"8OA2BA,MAAMA,EAhBN,SAASC,EAAoBC,GACzB,GAAIA,EAAMC,QAAS,CACf,MAAMC,EAAOH,EAAoBC,EAAMC,SACvC,MAAO,IACAC,KACAF,EACH,gBAAMG,CAAWC,GACTF,EAAKC,kBACCD,EAAKC,WAAWC,GACtBJ,EAAMG,kBACAH,EAAMG,WAAWC,EAC/B,EAER,CACA,OAAOJ,CACX,CACcD,CAAoBM,GAC5BC,EAAeC,EAAgB,CACjCC,KAAM,eACN,KAAAC,GACI,MAAMC,KAAEA,EAAAC,KAAMA,EAAAC,IAAMA,GAAQC,IAkB5B,OAhBAC,EAAU,KACNC,EAAY,KACRC,SAASC,gBAAgBN,KAAOA,EAAKO,MACrCF,SAASC,gBAAgBL,IAAMA,EAAIM,UAGfR,EAAKQ,MAAMC,OAAOC,eAE1CC,IAGJC,IAEAC,IACIzB,EAAMW,OACNX,EAAMW,QACH,IAAMe,EAAE1B,EAAM2B,OACzB,IAEJC,eAAsBC,IAElBC,WAAWC,eAAgB,EAC3B,MAAMV,EAuCV,WACI,IAAIW,EAAoBC,EACxB,OAAOC,EAAcC,IACjB,IAAIC,EAAeC,EAAWF,GAC1BG,EAAa,KA0BjB,OAzBIF,IAEIJ,IACAI,EAAeA,EAAaG,QAAQ,QAAS,aAgB7CD,EAAaE,OAAwBJ,IAGzCH,IACAD,GAAoB,GAEjBM,GACRtC,EAAMyC,SACb,CAvEmBC,GACTC,EAmCAC,EAAapC,GAlCnBmC,EAAIE,QAAQC,EAAczB,GAC1B,MAAM0B,EAAOC,EAAS3B,EAAO4B,OA6B7B,OA5BAN,EAAIE,QAAQK,EAAYH,GAExBJ,EAAIQ,UAAU,UAAWC,GACzBT,EAAIQ,UAAU,aAAcE,GAE5BC,OAAOC,iBAAiBZ,EAAIa,OAAOC,iBAAkB,CACjDC,aAAc,CACVC,IAAA,IACWZ,EAAKa,YAAYxC,OAGhCyC,QAAS,CACLF,IAAA,IACWZ,EAAKe,KAAK1C,MAAM2C,UAI/B/D,EAAMK,kBACAL,EAAMK,WAAW,CACnBsC,MACAtB,SACA2C,SAAUC,IAOX,CAAEtB,MAAKtB,SAAQ0B,OAC1B,CAuCId,GACAJ,IAAYqC,KAAK,EAAGvB,MAAKtB,SAAQ0B,WAE7B1B,EAAO8C,KAAKD,KAAK,KAEbE,EAAc/C,EAAO4B,MAAOF,EAAKnC,MACjC+B,EAAI0B,MAAM","x_google_ignoreList":[0]}